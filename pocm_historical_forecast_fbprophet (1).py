# -*- coding: utf-8 -*-
"""POCm_Historical Forecast FBProphet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wx6tTOSs0EOc9qgn59cQfVkKyDNwuEwW
"""

#pip install pystan fbprophet --user



"""#Used FBProphet to reduce the RMSE error for the predictions compared to ARIMA and SARIMA
#Used Dailysale data frame for forecasting
#Created a training set by taking the dates before May 01, 2020 and test set from May 02-15 2020 
#Used parameters like weekly_seasonality=True,daily_seasonality=True,  changepoint_prior_scale=2 to improve the accuracy and reduce error

"""

from google.colab import drive

drive.mount('/content/gdrive')

pip install pmdarima --user

# Commented out IPython magic to ensure Python compatibility.
import warnings
import numpy as np
import matplotlib.pyplot as plt
warnings.filterwarnings("ignore")
plt.style.use('fivethirtyeight')
import pandas as pd
import statsmodels.api as sm
import matplotlib
# %matplotlib inline
import seaborn as sns
pd.options.display.max_rows=50
pd.options.display.max_columns=10

from pmdarima import auto_arima
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import r2_score
from fbprophet import Prophet

import matplotlib.pyplot as plt
plt.rcParams["figure.figsize"] = (15,4)
matplotlib.rcParams['axes.labelsize'] = 14
matplotlib.rcParams['xtick.labelsize'] = 12
matplotlib.rcParams['ytick.labelsize'] = 12
matplotlib.rcParams['text.color'] = 'k'

#cd Downloads

data=pd.read_excel("/content/gdrive/MyDrive/POCM_HISTORICAL (1).xlsx",engine='openpyxl')



df=data[["Checkout_Date","Order_Quantity"]]
date = data[["Checkout_Date","Order_Quantity"]]

df.info()

df.dtypes

df['Checkout_Date'].max() - df['Checkout_Date'].min()

df['DayOfWeek'] = df['Checkout_Date'].dt.day_name()
print(df['DayOfWeek'])
df['month_name'] = df['Checkout_Date'].dt.month_name()
print(df['month_name'])

df.set_index('Checkout_Date',inplace=True)

df

#Understanding Weekly Order Quantity mean
weekly_df=df.resample('W').mean()

weekly_df

#sns.relplot(x="DayOfWeek",y="Order_Quantity",hue="month_name",data=df,height=5,aspect=3)

df.loc[df['Order_Quantity']>2000]

date = date.groupby(["Checkout_Date"])['Order_Quantity'].sum().reset_index()
date.head()

date=date[["Checkout_Date"]]

daily_df = df.groupby(["Checkout_Date","DayOfWeek","month_name"])['Order_Quantity'].sum().reset_index()
daily_df.head()

### Testing For Stationarity

from statsmodels.tsa.stattools import adfuller
#Ho: It is non stationary
#H1: It is stationary

def adfuller_test(Order_Quantity):
    result=adfuller(Order_Quantity)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations Used']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )
    if result[1] <= 0.05:
        print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data has no unit root and is stationary")
    else:
        print("weak evidence against null hypothesis, time series has a unit root, indicating it is non-stationary ")

adfuller_test(daily_df['Order_Quantity'])

import statsmodels
print(statsmodels.__version__)

from statsmodels.tsa.seasonal import seasonal_decompose
final = seasonal_decompose(daily_df['Order_Quantity'],model='additive', period = 52) # annual=1,Quaterly=4,monthly=12,weekly=52
final.plot();

daily_df=daily_df[["Checkout_Date","Order_Quantity"]]

daily_df['Checkout_Date']

#print(daily_df.shape)
#train_time = pd.date_range(start='2018-12-04', end='2020-05-01')
#test_time=pd.date_range(start='2020-05-01', end='2020-05-1')

train = daily_df[(daily_df['Checkout_Date'] > '2018-12-04') & (daily_df['Checkout_Date'] <= '2020-05-01')]

train

test = daily_df[(daily_df['Checkout_Date'] > '2020-05-01')]

test=test.reset_index()

#pip install pystan fbprophet

from fbprophet import Prophet

m=Prophet(weekly_seasonality=True,daily_seasonality=True,  changepoint_prior_scale=2)

#m.add_seasonality(name='monthly', period=30.5, fourier_order=5, prior_scale=0.02)

daily_df

train=train.rename(columns = {'Order_Quantity':'y', 'Checkout_Date':'ds'})
                              
#, inplace = True

test=test.rename(columns = {'Order_Quantity':'y', 'Checkout_Date':'ds'})



model=m.fit(train)

forecast=model.predict(test)

forecast[['ds','yhat']]

test["y"] = pd.to_numeric(test["y"])

test

forecast['yhat']

from decimal import Decimal

se = np.square(forecast['yhat'] - test['y'])
mse = np.mean(se)
rmse = np.sqrt(mse)

rmse

test

test['yhat'] = forecast['yhat']
test['y'].plot(legend=True)
forecast['yhat'].plot(legend= True)

fig1 =m.plot(forecast)

fig1 = m.plot_components(forecast)

